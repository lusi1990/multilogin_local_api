# coding: utf-8

"""
    Multilogin Local REST API

    Multilogin Local REST API can be used in order to start, stop, share, clone browser profile/-s. You can also check if the profile is already running on your machine by using checkProfileRunning endpoint and import cookies by using cookieImportJSON/cookieImportNetscape endpoint.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CookieJSONExample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'expiration_date': 'str',
        'host_only': 'bool',
        'http_only': 'bool',
        'name': 'str',
        'path': 'str',
        'same_site': 'str',
        'secure': 'bool',
        'session': 'bool',
        'store_id': 'str',
        'value': 'str',
        'id': 'int'
    }

    attribute_map = {
        'domain': 'domain',
        'expiration_date': 'expirationDate',
        'host_only': 'hostOnly',
        'http_only': 'httpOnly',
        'name': 'name',
        'path': 'path',
        'same_site': 'sameSite',
        'secure': 'secure',
        'session': 'session',
        'store_id': 'storeId',
        'value': 'value',
        'id': 'id'
    }

    def __init__(self, domain=None, expiration_date=None, host_only=None, http_only=None, name=None, path=None, same_site=None, secure=None, session=None, store_id=None, value=None, id=None):  # noqa: E501
        """CookieJSONExample - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._expiration_date = None
        self._host_only = None
        self._http_only = None
        self._name = None
        self._path = None
        self._same_site = None
        self._secure = None
        self._session = None
        self._store_id = None
        self._value = None
        self._id = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if host_only is not None:
            self.host_only = host_only
        if http_only is not None:
            self.http_only = http_only
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if same_site is not None:
            self.same_site = same_site
        if secure is not None:
            self.secure = secure
        if session is not None:
            self.session = session
        if store_id is not None:
            self.store_id = store_id
        if value is not None:
            self.value = value
        if id is not None:
            self.id = id

    @property
    def domain(self):
        """Gets the domain of this CookieJSONExample.  # noqa: E501


        :return: The domain of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CookieJSONExample.


        :param domain: The domain of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CookieJSONExample.  # noqa: E501


        :return: The expiration_date of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CookieJSONExample.


        :param expiration_date: The expiration_date of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def host_only(self):
        """Gets the host_only of this CookieJSONExample.  # noqa: E501


        :return: The host_only of this CookieJSONExample.  # noqa: E501
        :rtype: bool
        """
        return self._host_only

    @host_only.setter
    def host_only(self, host_only):
        """Sets the host_only of this CookieJSONExample.


        :param host_only: The host_only of this CookieJSONExample.  # noqa: E501
        :type: bool
        """

        self._host_only = host_only

    @property
    def http_only(self):
        """Gets the http_only of this CookieJSONExample.  # noqa: E501


        :return: The http_only of this CookieJSONExample.  # noqa: E501
        :rtype: bool
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this CookieJSONExample.


        :param http_only: The http_only of this CookieJSONExample.  # noqa: E501
        :type: bool
        """

        self._http_only = http_only

    @property
    def name(self):
        """Gets the name of this CookieJSONExample.  # noqa: E501


        :return: The name of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CookieJSONExample.


        :param name: The name of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this CookieJSONExample.  # noqa: E501


        :return: The path of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CookieJSONExample.


        :param path: The path of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def same_site(self):
        """Gets the same_site of this CookieJSONExample.  # noqa: E501


        :return: The same_site of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._same_site

    @same_site.setter
    def same_site(self, same_site):
        """Sets the same_site of this CookieJSONExample.


        :param same_site: The same_site of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._same_site = same_site

    @property
    def secure(self):
        """Gets the secure of this CookieJSONExample.  # noqa: E501


        :return: The secure of this CookieJSONExample.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this CookieJSONExample.


        :param secure: The secure of this CookieJSONExample.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def session(self):
        """Gets the session of this CookieJSONExample.  # noqa: E501


        :return: The session of this CookieJSONExample.  # noqa: E501
        :rtype: bool
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this CookieJSONExample.


        :param session: The session of this CookieJSONExample.  # noqa: E501
        :type: bool
        """

        self._session = session

    @property
    def store_id(self):
        """Gets the store_id of this CookieJSONExample.  # noqa: E501


        :return: The store_id of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CookieJSONExample.


        :param store_id: The store_id of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def value(self):
        """Gets the value of this CookieJSONExample.  # noqa: E501


        :return: The value of this CookieJSONExample.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CookieJSONExample.


        :param value: The value of this CookieJSONExample.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def id(self):
        """Gets the id of this CookieJSONExample.  # noqa: E501


        :return: The id of this CookieJSONExample.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CookieJSONExample.


        :param id: The id of this CookieJSONExample.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CookieJSONExample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CookieJSONExample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
