# coding: utf-8

"""
    Multilogin Local REST API

    Multilogin Local REST API can be used in order to start, stop, share, clone browser profile/-s. You can also check if the profile is already running on your machine by using checkProfileRunning endpoint and import cookies by using cookieImportJSON/cookieImportNetscape endpoint.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from multiloginlocal.api_client import ApiClient


class MiscApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def active_get(self, profile_id, **kwargs):  # noqa: E501
        """checkProfileRunning  # noqa: E501

        Check if profile is already running  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_get(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_get_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.active_get_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def active_get_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """checkProfileRunning  # noqa: E501

        Check if profile is already running  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_get_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `active_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def by_profile_id_get(self, profile_id, **kwargs):  # noqa: E501
        """cloneProfile  # noqa: E501

        Clone browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.by_profile_id_get(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.by_profile_id_get_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.by_profile_id_get_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def by_profile_id_get_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """cloneProfile  # noqa: E501

        Clone browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.by_profile_id_get_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method by_profile_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `by_profile_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/clone', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cookies_import_netscape_get(self, body, content_type, profile_id, **kwargs):  # noqa: E501
        """cookieImportNetscape  # noqa: E501

        Import Cookies in Netscape format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cookies_import_netscape_get(body, content_type, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CookieNetscapeExample body: (required)
        :param str content_type: Cookies in text/plain format (required)
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cookies_import_netscape_get_with_http_info(body, content_type, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cookies_import_netscape_get_with_http_info(body, content_type, profile_id, **kwargs)  # noqa: E501
            return data

    def cookies_import_netscape_get_with_http_info(self, body, content_type, profile_id, **kwargs):  # noqa: E501
        """cookieImportNetscape  # noqa: E501

        Import Cookies in Netscape format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cookies_import_netscape_get_with_http_info(body, content_type, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CookieNetscapeExample body: (required)
        :param str content_type: Cookies in text/plain format (required)
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cookies_import_netscape_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cookies_import_netscape_get`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `cookies_import_netscape_get`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `cookies_import_netscape_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cookies/import/netscape', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cookies_import_webext_get(self, body, content_type, profile_id, **kwargs):  # noqa: E501
        """cookieImportJSON  # noqa: E501

        Import Cookies in JSON format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cookies_import_webext_get(body, content_type, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CookieJSONExample body: (required)
        :param str content_type: Cookies in application/json format (required)
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cookies_import_webext_get_with_http_info(body, content_type, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cookies_import_webext_get_with_http_info(body, content_type, profile_id, **kwargs)  # noqa: E501
            return data

    def cookies_import_webext_get_with_http_info(self, body, content_type, profile_id, **kwargs):  # noqa: E501
        """cookieImportJSON  # noqa: E501

        Import Cookies in JSON format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cookies_import_webext_get_with_http_info(body, content_type, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CookieJSONExample body: (required)
        :param str content_type: Cookies in application/json format (required)
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cookies_import_webext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cookies_import_webext_get`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `cookies_import_webext_get`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `cookies_import_webext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cookies/import/webext', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def share_get(self, profile_id, user, **kwargs):  # noqa: E501
        """shareProfile  # noqa: E501

        Share browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_get(profile_id, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :param str user: Multilogin account (email address) to share profile with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.share_get_with_http_info(profile_id, user, **kwargs)  # noqa: E501
        else:
            (data) = self.share_get_with_http_info(profile_id, user, **kwargs)  # noqa: E501
            return data

    def share_get_with_http_info(self, profile_id, user, **kwargs):  # noqa: E501
        """shareProfile  # noqa: E501

        Share browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.share_get_with_http_info(profile_id, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :param str user: Multilogin account (email address) to share profile with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `share_get`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `share_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/share', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_get(self, profile_id, **kwargs):  # noqa: E501
        """startProfile  # noqa: E501

        Launch browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_get(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :param bool load_tabs: If set to true, tabs from previous session will open
        :param bool automation: Set to true to launch profile with Selenium/Puppeteer
        :param bool puppeteer: Set to true to launch profile with Puppeteer automation
        :return: MainOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_get_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_get_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def start_get_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """startProfile  # noqa: E501

        Launch browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_get_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :param bool load_tabs: If set to true, tabs from previous session will open
        :param bool automation: Set to true to launch profile with Selenium/Puppeteer
        :param bool puppeteer: Set to true to launch profile with Puppeteer automation
        :return: MainOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id', 'load_tabs', 'automation', 'puppeteer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `start_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501
        if 'load_tabs' in params:
            query_params.append(('loadTabs', params['load_tabs']))  # noqa: E501
        if 'automation' in params:
            query_params.append(('automation', params['automation']))  # noqa: E501
        if 'puppeteer' in params:
            query_params.append(('puppeteer', params['puppeteer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/start', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MainOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_get(self, profile_id, **kwargs):  # noqa: E501
        """stopProfile  # noqa: E501

        Stop browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_get(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_get_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_get_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def stop_get_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """stopProfile  # noqa: E501

        Stop browser profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_get_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Browser profile ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `stop_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stop', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
